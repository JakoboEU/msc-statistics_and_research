geom_boxplot()
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)")
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c("Automatic", "Manual"))
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1))
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
theme(axis.text.x= element_text("Automatic", "Manual"))
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual"))
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(fun.data = mean, geom="text")
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(fun.data = mean, geom="text", fun.y = mean)
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(fun.data = mean, geom = "boxplot")
?stat_summary
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(fun.y = mean)
?stat_summary
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(fun.y=mean, geom="point") +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=8)
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(fun.y=mean, geom="point") +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4)
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4)
?stat_summary
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, position=-2)
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.7)
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
pdf("Automatic_vs_manual.pdf", width = 8, height = 6)
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)") +
scale_x_discrete(limits = c(0, 1), labels=c("Automatic", "Manual")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
dev.off() # close plotting element
# OR
subjects<-seq(from=1, to=15, by=1)
before<-c(12.9, 13.5, 12.8, 15.6, 17.2, 19.2, 12.6, 15.3, 14.4, 11.3, 14.2, 13.7, 16.8, 12.9, 14.5)
after<-c(12.0, 12.2, 11.2, 13.0, 15.0, 15.8, 12.2, 13.4, 12.9, 11.0, 13.2, 13.4, 13.4, 11.2, 13.5)
mean(before)
sd(before)
mean(after)
sd(after)
par(mfrow=c(1,2)) # plots are arranged in 1 row and 2 columns
boxplot(before, ylim=c(10,20), main="Before")
boxplot(after, ylim=c(10,20), main="After")
par(mfrow=c(2,1))
hist(before)
hist(after)
# Paired t-tests have the same assumptions as standard t-test and from the boxplot and histogram - the data look roughly ok to proceed.
# Paired t-test
t.test(before,after, paired=TRUE)
# Combine the data using the data.frame function blood<-data.frame(subjects, before, after)
blood # view data in the console
# Combine the data using the data.frame function
blood<-data.frame(subjects, before, after)
blood # view data in the console
str(blood) # check data structure
# Open the reshape2 package
library(reshape2)
# Use the melt function to change the blood dataframe from wide to long form.
blood.long<-melt(blood, id.vars=c("subjects"), measure.vars=c("before", "after"), variable.name="Condition", value.name="BP")
# also change the column names
str(blood.long)
# see how the data structure has changed
blood.long # view data in the console
par(mfrow=c(1,1)) # change plotting window back to standard single graph format boxplot(BP~Condition, data=blood.long)
boxplot(BP~Condition, data=blood.long)
blood
?melt
blood.long
boxplot(BP~Condition, data=blood.long)
# ---------------------------------------------------------------------------------
# OR
# ---------------------------------------------------------------------------------
blood.long2 <- gather(blood,
value = "BP",
key = "subjects",
before, after)
blood.long2
?gather
library(ggplot)
# ---------------------------------------------------------------------------------
# OR
# ---------------------------------------------------------------------------------
library(tidyr)
blood.long2 <- gather(blood,
value = "BP",
key = "subjects",
before, after)
ggplot(mtcars, aes(x=Condition, y=BP, group=Condition)) +
geom_boxplot() +
xlab("Before and After Exercise") + ylab("Blood Presure") +
scale_x_discrete(limits = c("before", "after"), labels=c("Before", "After")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
blood.long2
ggplot(blood.long2, aes(x=Condition, y=BP, group=Condition)) +
geom_boxplot() +
xlab("Before and After Exercise") + ylab("Blood Presure") +
scale_x_discrete(limits = c("before", "after"), labels=c("Before", "After")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
blood.long2
blood.long2 <- gather(blood,
value = "BP",
key = "Condition",
before, after)
blood.long2
ggplot(blood.long2, aes(x=Condition, y=BP, group=Condition)) +
geom_boxplot() +
xlab("Before and After Exercise") + ylab("Blood Presure") +
scale_x_discrete(limits = c("before", "after"), labels=c("Before", "After")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
data(iris)
iris
names(iris)  # examine variable names
str(iris)  # examine the data structure
# subset only those two species we are interested in
notvirginica<-subset(iris,Species!="virginica") # removes virginica species
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()  +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()  +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.5)
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()  +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.3)
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()  +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.2)
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()  +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4)
ggplot(notvirginica, aes(x = Petal.Width, fill=Species)) +
geom_bar()
ggplot(notvirginica, aes(x = Petal.Width, fill=Species)) +
geom_bar() +
facet_grid(~Species)
ggplot(notvirginica, aes(x = Petal.Width, fill=Species)) +
geom_bar() +
facet_grid(~Species, ncol=1)
ggplot(notvirginica, aes(x = Petal.Width, fill=Species)) +
geom_bar() +
facet_wrap(~Species, ncol=1)
# Do you think there will be a difference between species?
# Do you think the data will conform to the t-test assumptions of normality and homogeneity of variances?
shapiro.test(notvirginica$Petal.Width)
bartlett.test(notvirginica$Petal.Width, notvirginica$Species)
# Lets try to transform the data and see if that helps with our normality issues.
# --------------------------------------------------------------------------------
# Log10 transform petal width - creating a new object called PW.log
PW.log<-log10(notvirginica$Petal.Width)
# Square root transform petal width - creating a new object called PW.sqrt
PW.sqrt<-sqrt(notvirginica$Petal.Width)
# Use cbind (column bind) to add the new objects to our dataframe
new.notvirginica<-cbind(notvirginica, PW.log, PW.sqrt)
new.notvirginica
# Test transformed data for normality
hist(new.notvirginica$PW.log)
shapiro.test(new.notvirginica$PW.log) # still very significantly different from normal
hist(new.notvirginica$PW.sqrt)
shapiro.test(new.notvirginica$PW.sqrt) # still very significantly different from normal
ggplot(notvirginica, aes(x = Petal.Width, fill=Species)) +
geom_bar() +
facet_wrap(~Species, ncol=1)
# Lets try the Mann-Whitney on our original (non-transformed) data.
# -----------------------------------------------------------------
wilcox.test(notvirginica$Petal.Width~notvirginica$Species)
notvirginica
mean(notvirginica[Species="versicolor",])
mean(notvirginica[Species=="versicolor",])
mean(notvirginica[,Species=="versicolor"])
mean(notvirginica[,notvirginica$Species=="versicolor"])
mean(notvirginica[notvirginica$Species=="versicolor",])
mean(notvirginica[notvirginica$Species=="versicolor",]$Petal.Width)
sd(notvirginica[notvirginica$Species=="versicolor",]$Petal.Width)
mean(notvirginica[notvirginica$Species=="setosa",]$Petal.Width)
sd(notvirginica[notvirginica$Species=="setosa",]$Petal.Width)
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()  +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4)
ggplot(notvirginica, aes(x = Petal.Width, fill=Species)) +
geom_bar() +
xlab("Petal width (cm)") +
facet_wrap(~Species, ncol=1)
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()  +
xlab("Petal width (cm)") +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4)
ggplot(notvirginica, aes(Species, Petal.Width)) +
geom_boxplot()  +
ylab("Petal width (cm)") +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4)
# We can use the tapply function to calculate the mean and the standard deviation of groups:
tapply(iris$Sepal.Width, iris$Species, FUN=mean)
tapply(iris$Sepal.Width, iris$Species, FUN=sd)
# setosa versicolor  virginica
# 0.3790644  0.3137983  0.3224966
hist(iris$Sepal.Width)
boxplot(iris$Sepal.Width~iris$Species)
# Now we need to examine the test assumptions for the ANOVA, which are the same we looked at earlier for t-tests
# 1. The data are continuous
# 2. At least approximately normally distributed
# 3. The variances of the groups are homogenous
# Test for normality
shapiro.test(iris$Sepal.Width) # NOT significantly different from normal
# Test for homogeneity of variances
bartlett.test(iris$Sepal.Width, iris$Species) # NO significant difference in variance
# Ok, so our data meet the ANOVA assumptions, we can proceed with the test.
# ANOVA to test for differences in the three groups anova1<-aov(Sepal.Width~Species, data=iris)
summary(anova1) # use the summary function to extract your ANOVA results
# Ok, so our data meet the ANOVA assumptions, we can proceed with the test.
# ANOVA to test for differences in the three groups
anova1<-aov(Sepal.Width~Species, data=iris)
summary(anova1) # use the summary function to extract your ANOVA results
# Tukey post hoc test
library(multcomp)
install.packages("multcomp")
# Tukey post hoc test
library(multcomp)
# carry out post hoc test on our anova1 object – Species are our iris categories
cld(glht(anova1, linfct=mcp(Species="Tukey")))
# or we could use a mean plot with error bars, or a bar graph with error bars.
# Using the following function obtained from the R Cookbook website we can very quickly produce either of these error bar plots.
# http://www.cookbook-r.com/Manipulating_data/Summarizing_data/ its under the ‘Using ddply’ heading.
## Summarizes data.
## Gives count, mean, standard deviation, standard error of the mean, and confidence interval (default 95%).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   groupvars: a vector containing names of columns that contain grouping variables
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
SW.sum <- summarySE(iris, measurevar="Sepal.Width", groupvars=c("Species"))
SW.sum
# Mean CI plot
ggplot(SW.sum, aes(x=Species, y=Sepal.Width)) +
geom_errorbar(aes(ymin=Sepal.Width-ci, ymax=Sepal.Width+ci), width=.1) + geom_point() +
theme_bw()
# Bar graph with CI
ggplot(SW.sum, aes(x=Species, y=Sepal.Width)) +
geom_bar(position=position_dodge(), stat="identity") + geom_errorbar(aes(ymin=Sepal.Width-ci, ymax=Sepal.Width+ci), width=.1) + theme_bw()
# Mean CI plot
ggplot(SW.sum, aes(x=Species, y=Sepal.Width)) +
geom_errorbar(aes(ymin=Sepal.Width-ci, ymax=Sepal.Width+ci), width=.1) +
geom_point() +
theme_bw()
pdf("Sepal_Width_Tukey.pdf", width = 5, height = 5)
ggplot(SW.sum, aes(x=Species, y=Sepal.Width)) +
geom_errorbar(aes(ymin=Sepal.Width-ci, ymax=Sepal.Width+ci), width=.1) + geom_point() +
scale_y_continuous(name="Sepal Width (mm)") +
annotate("text", x = 1, y = 3.6, label = "c") +
annotate("text", x = 2, y = 2.9, label = "a") + annotate("text", x = 3, y = 3.1, label = "b") + theme_bw()
dev.off()
# We can use the tapply function to calculate the mean and the sd groups:
tapply(iris$Petal.Width, iris$Species, FUN=mean)
tapply(iris$Petal.Width, iris$Species, FUN=sd)
# setosa versicolor  virginica
# 0.1053856  0.1977527  0.2746501
hist(iris$Petal.Width)
boxplot(iris$Petal.Width~iris$Species)
shapiro.test(iris$Petal.Width) # NOT significantly different from normal
# Test for homogeneity of variances
bartlett.test(iris$Petal.Width, iris$Species) # NO significant difference in variance
# Log10 transform petal width - creating a new object called
PW.log PW.log<-log10(iris$Petal.Width)
# Log10 transform petal width - creating a new object called PW.log
PW.log<-log10(iris$Petal.Width)
# Square root transform petal width - creating a new object called PW.sqrt
PW.sqrt<-sqrt(iris$Petal.Width)
# Use cbind (column bind) to add the new objects to our dataframe
new.iris<-cbind(iris, PW.log, PW.sqrt)
# Test for normality
hist(new.iris$PW.log)
hist(new.iris$PW.sqrt)
shapiro.test(new.iris$PW.log) # still very significantly different from normal
hist(new.iris$PW.sqrt)
shapiro.test(new.iris$PW.sqrt) # still very significantly different from normal
# Kruskal-Wallis test
kruskal.test(Petal.Width~Species, data = iris)
notvirginica<- subset(iris,Species!="virginica")
notsetosa<-subset(iris,Species!="setosa")
notversicolor<-subset(iris,Species!="versicolor")
wilcox.test(notvirginica$Petal.Width~notvirginica$Species)
wilcox.test(notsetosa$Petal.Width~notsetosa$Species)
wilcox.test(notversicolor$Petal.Width~notversicolor$Species)
# Pairwise wilcoxon test
#  This gives the same result but we don’t have the fun of subsetting!
pairwise.wilcox.test(iris$Petal.Width,iris$Species)
ggplot(SW.sum, aes(x=Species, y=Sepal.Width)) +
geom_errorbar(aes(ymin=Sepal.Width-ci, ymax=Sepal.Width+ci), width=.1) + geom_point() +
scale_y_continuous(name="Sepal Width (mm)") +
annotate("text", x = 1, y = 3.6, label = "c") +
annotate("text", x = 2, y = 2.9, label = "a") + annotate("text", x = 3, y = 3.1, label = "b") + theme_bw()
# Bar graph with CI
ggplot(SW.sum, aes(x=Species, y=Sepal.Width)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=Sepal.Width-ci, ymax=Sepal.Width+ci), width=.1) +
theme_bw()
ggplot(blood.long2, aes(x=Condition, y=BP, group=Condition)) +
geom_boxplot() +
xlab("Before and After Exercise") + ylab("Blood Presure") +
scale_x_discrete(limits = c("before", "after"), labels=c("Before", "After")) +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
# P value adjustment method: holm
ggplot(iris, aes(x=Species, y=Petal.Width, group=Species)) +
geom_boxplot() +
xlab("Species") + ylab("Petal Width (cm)") +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
# P value adjustment method: holm
ggplot(iris, aes(x=Species, y=Petal.Width, group=Species)) +
geom_boxplot() +
xlab("Species") + ylab("Petal Width (cm)")
rm(list=ls())
# set working directory
setwd("/Users/jamese.richardson/Projects/Masters/statistics_and_research/practice2")
# list files in working directory
list.files()
# Load required libaries
library(tidyverse)
library(ggplot2)
#
# Load the wildebeest data
wildebeest <- read_csv("wildebeest.csv")
#
# Load the wildebeest data
wildebeest <- read_csv("wildebeest2.csv")
# Examine the data
summary(wildebeest)
names(iris)
str(iris)
# Examine the data
names(wildebeest)
str(wildebeest)
# check the mean of horn length for females and males
tapply(mtcars$horn, mtcars$sex, FUN=mean)
# check the mean of horn length for females and males
tapply(wildebeest$horn, wildebeest$sex, FUN=mean)
# female     male
# 39.84217 59.52892
tapply(wildebeest$horn, wildebeest$sex, FUN=sd)
ggplot(mtcars, aes(x=am, y=mpg, group=am)) +
geom_boxplot() +
xlab("Manual vs Automatic") + ylab("Fuel Economy (mpg)")
ggplot(wildebeest, aes(x=sex, y=horn, group=sex)) +
geom_boxplot() +
xlab("Male vs Female") + ylab("Horn Length (cm)")
ggplot(wildebeest, aes(x = horn, fill=sex)) +
geom_bar() +
facet_wrap(~sex, ncol=1)
?geom_bar
ggplot(wildebeest, aes(x = horn, fill=sex)) +
geom_bar(binwidth = 5)+
facet_wrap(~sex, ncol=1)
ggplot(wildebeest, aes(x = horn, fill=sex)) +
geom_bar(binwidth = 2)+
facet_wrap(~sex, ncol=1)
ggplot(wildebeest, aes(x = horn, fill=sex)) +
geom_bar(binwidth = 2)+
facet_wrap(~sex, ncol=1) +
xlab("Horn Length (cm)") + ylab("Number of Wildebeest")
# Have to categories (male vs female) and one continuous variable (horn length)
# Is data normal?
shapiro.test(wildebeest$horn)
shapiro.test(new.notvirginica$PW.log) # still very significantly different from normal
PW.log<-log10(notvirginica$Petal.Width)
# Square root transform petal width - creating a new object called PW.sqrt
PW.sqrt<-sqrt(notvirginica$Petal.Width)
# Use cbind (column bind) to add the new objects to our dataframe
new.notvirginica<-cbind(notvirginica, PW.log, PW.sqrt)
# Test transformed data for normality
hist(new.notvirginica$PW.log)
shapiro.test(new.notvirginica$PW.log)
# W = 0.94774, p-value = 8.077e-06 <- Significantly different from normal
bartlett.test(wildebeest$horn, wildebeest$sex
# W = 0.94774, p-value = 8.077e-06 <- Significantly different from normal
bartlett.test(wildebeest$horn, wildebeest$sex)
# W = 0.94774, p-value = 8.077e-06 <- Significantly different from normal
bartlett.test(wildebeest$horn, wildebeest$sex)
# Not normal, so use Wilcoxon Rank test
wilcox.test(wildebeest$horn~wildebeest$sex)
# clear r console
rm(list=ls())
# clear r console
rm(list=ls())
ggplot(wildebeest, aes(x = horn, fill=sex)) +
geom_bar(binwidth = 2)+
facet_wrap(~sex, ncol=1) +
xlab("Horn Length (cm)") + ylab("Number of Wildebeest")
rm(list=ls())
# set working directory
setwd("/Users/jamese.richardson/Projects/Masters/statistics_and_research/practice2")
# list files in working directory
list.files()
library(tidyverse)
library(ggplot2)
#
# Load the wildebeest data
wildebeest <- read_csv("wildebeest2.csv")
ggplot(wildebeest, aes(x=sex, y=horn, group=sex)) +
geom_boxplot() +
xlab("Male vs Female") + ylab("Horn Length (cm)")
ggplot(wildebeest, aes(x = horn, fill=sex)) +
geom_bar(binwidth = 2)+
facet_wrap(~sex, ncol=1) +
xlab("Horn Length (cm)") + ylab("Number of Wildebeest")
# Test for normality
shapiro.test(wildebeest$horn)
# Test for homogeneity of variances
bartlett.test(wildebeest$horn, wildebeest$sex)
# Not normal, so use Wilcoxon Rank test
wilcox.test(wildebeest$horn~wildebeest$sex)
ggplot(wildebeest, aes(x=sex, y=horn, group=sex)) +
geom_boxplot() +
xlab("Male vs Female") + ylab("Horn Length (cm)")
ggplot(wildebeest, aes(x=sex, y=horn, group=sex)) +
geom_boxplot() +
ylab("Horn Length (cm)") +
labs(title = "Comparing Horn Length of Wildebeest", subtitle = "Males vs Females")
ggplot(wildebeest, aes(x=sex, y=horn, group=sex)) +
geom_boxplot() +
ylab("Horn Length (cm)") + xlab("") +
labs(title = "Comparing Horn Length of Wildebeest", subtitle = "Males vs Females")
ggplot(wildebeest, aes(x=sex, y=horn, group=sex)) +
geom_boxplot() +
ylab("Horn Length (cm)") + xlab("") +
labs(title = "Comparing Horn Length of Wildebeest", subtitle = "Males vs Females") +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
pdf("Wildebeest_horn_length.pdf", width = 8, height = 6)
ggplot(wildebeest, aes(x=sex, y=horn, group=sex)) +
geom_boxplot() +
ylab("Horn Length (cm)") + xlab("") +
labs(title = "Comparing Horn Length of Wildebeest", subtitle = "Males vs Females") +
stat_summary(aes(label=..y..), fun.y=mean, geom="text", size=4, vjust=-0.9)
dev.off() # close plotting element
